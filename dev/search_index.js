var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QEDevents","category":"page"},{"location":"#QEDevents","page":"Home","title":"QEDevents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QEDevents.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QEDevents]","category":"page"},{"location":"#QEDevents.AbstractSampler","page":"Home","title":"QEDevents.AbstractSampler","text":"Abstract base type for general sampler.\n\nnote: Sampler interface\nFunctions to be implementedCustomSampler <: AbstractSampler{Float64}\n\nBase.eltype  # type of the generated samples\nQEDevents._weight\nBase.size  # Return the dimensionality of the sampler (number of outgoing four-momenta per sample).\nis_exact\nQEDevents._rand!(rng::AbstractRNG, ::AbstractSampler, x::AbstractVector{T}) where {T}\noptional_post_processing\n\n\n\n\n\n","category":"type"},{"location":"#Distributions._rand!-Tuple{Random.AbstractRNG, AbstractSampler, AbstractVector}","page":"Home","title":"Distributions._rand!","text":"_rand!(\n    rng::Random.AbstractRNG,\n    smplr::AbstractSampler,\n    x::AbstractVector\n)\n\n\nGenerate a random sample from the sampler and write it into the given vector.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._assert_valid_input-Tuple{AbstractSampler, AbstractVecOrMat}","page":"Home","title":"QEDevents._assert_valid_input","text":"Interface function, which asserts that the given input is valid.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._weight","page":"Home","title":"QEDevents._weight","text":"_weight(::AbstractSampler, sample)\n\nInterface function, which returns the weight associated with the given sample according to the sampler.\n\nnote: \nThis function must not do input validation. This is done by weight, which calls _weight after input validation.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents.is_exact","page":"Home","title":"QEDevents.is_exact","text":"is_exact(::AbstractSampler)\n\nInterface function, which returns whether the sampler is exactly representing the base distribution or not.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents.max_weight","page":"Home","title":"QEDevents.max_weight","text":"max_weight(::AbstractSampler)\n\nInterface function, which returns the maximum possible weight for the sampler.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents.setup","page":"Home","title":"QEDevents.setup","text":"setup(::AbstractSampler)\n\nInterface function, which returns the setup::AbstractComputeSetup associated with the sampler.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents.weight-Tuple{AbstractSampler, Any}","page":"Home","title":"QEDevents.weight","text":"weight(smplr::AbstractSampler, sample)\n\n\nInterface function, which validates the input, calculates the weight via _weight, and performs an optional post-processing via QEDprocesses._post_processing.\n\n\n\n\n\n","category":"method"}]
}
