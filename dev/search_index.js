var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QEDevents","category":"page"},{"location":"#QEDevents","page":"Home","title":"QEDevents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QEDevents.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QEDevents]","category":"page"},{"location":"#QEDevents.MultiParticleVariate","page":"Home","title":"QEDevents.MultiParticleVariate","text":"MultiParticleVariate\n\nAuxiliary type to represent multiple particles in the context of distributions and sampler. A sample from this variate form has the type Vector{ParticleStateful}.\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.ParticleLikeVariate","page":"Home","title":"QEDevents.ParticleLikeVariate","text":"ParticleLikeVariate{N<:Int}\n\nAuxiliary type to represent the number of axes in the space of all particles:\n\nN == 0 single particle variate\nN == 1 multiple particle variate\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.ParticleSampleable","page":"Home","title":"QEDevents.ParticleSampleable","text":"ParticleSampleable{V<:QEDlikeVariate}\n\nAbstract base type for sampleable particle distributions and sampler in the context of QEDevents.jl. Here a particle-sampleable is generally a type which has some sort of rand function to produce random samples for properties of given particles, like four-momentum, spin, polarization, etc..\n\nTo implement the particle-sampleable interface, the following functions need to be given:\n\nBase.eltype(s::ParticleSampleable): return the innermost type of the samples\n_weight(s::ParticleSampleable,x): return the weight of a given sample x\nis_exact(s::ParticleSampleable): return wether or not a particle-sampleable is exact\n\nOptionally, one can enhance the calculation of weights by providing\n\n_assert_valid_input_type(s::ParticleSampleable,x): assert input has the correct type\n_assert_valid_input(s::ParticleSampleable,x): assert input has correct properties\n_post_processing(s::ParticleSampleable,x,res): apply some postprocesing to the result of _weight.\n\nSee weight for details. Furthermore, one can provide custom four-momentum types used for the generation of samples by implementing\n\n_momentum_type(s::ParticleSampleable): return the momentum type used\n\nThe actual sampling function depends on the variate form:\n\nnote: Single particle sampler\nFor SingleParticleVariatesamplers, one needs to implement the single sample version rand:Distributions.rand(\n    rng::Random.AbstractRNG,\n    s::ParticleSampleable{SingleParticleVariate})which returns a random sample from s as a ParticleStateful.\n\nnote: Multiple particle sampler\nFor MultiParticleVariate samplers, one needs to implementBase.size(s::ParticleSampleable{MultiParticleVariate})and the mutating version of rand:Distributions._rand!(\n    rng::Random.AbstractRNG,\n    s::ParticleSampleable{MultiParticleVariate},\n    out::AbstractArray{ParticleStateful})\n\nnote: Scattering process sampler\nFor ProcessLikeVariate samplers, one needs to give the single sampler version of rand:Distributions.rand(\n    rng::Random.AbstractRNG,\n    s::ParticleSampleable{SingleParticleVariate})which must a random sample from s as a PhaseSpacePoint of the respective scattering process.\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.ProcessLikeVariate","page":"Home","title":"QEDevents.ProcessLikeVariate","text":"ProcessLikeVariate\n\nAuxiliary type to represent distributions and samplers for scattering processes.\n\nA sample from this variate form has the type PhaseSpacePoint.\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.SingleParticleDistribution","page":"Home","title":"QEDevents.SingleParticleDistribution","text":"SingleParticleDistribution\n\nBase type for sample drawing from single particle distributions. The following interface functions should be implemented:\n\nQEDevents._particle(d::SingleParticleDistribution): return associated particle\nQEDevents._particle_direction(d::SingleParticleDistribution): return associated particle direction\nDistributions.rand(rng::AbstractRNG,d::SingleParticleDistribution): return random sample as a ParticleStateful\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.SingleParticleVariate","page":"Home","title":"QEDevents.SingleParticleVariate","text":"SingleParticleVariate\n\nAuxiliary type to represent single particles in the context of distributions and sampler. A sample from this variate form has the type ParticleStateful.\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents._assert_valid_input-Tuple{QEDevents.ParticleSampleable, Any}","page":"Home","title":"QEDevents._assert_valid_input","text":"_assert_valid_input(s::ParticleSampleable,x)\n\nThrow InvalidInputError if the input x is not valid, do nothing otherwise. This function is usually used for checking, if the input has the assumed properties. Type checks are done using multiple dispatch, or _assert_valid_input_type. The default is doing nothing.\n\nnote: Note\nThis interface function is optional for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._assert_valid_input_type-Tuple{QEDevents.ParticleSampleable, Any}","page":"Home","title":"QEDevents._assert_valid_input_type","text":"_assert_valid_input_type(s::ParticleSampleable,x)\n\nThrow InvalidInputError if the input x has the wrong type, do nothing otherwise. This function is usually used for complicated types, where the implementation via multiple dispatch is cumbersome. The default is doing nothing.\n\nnote: Note\nThis interface function is optional for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._assert_valid_input_type-Union{Tuple{P}, Tuple{D}, Tuple{SingleParticleDistribution, QEDprocesses.ParticleStateful{D, P}}} where {D, P}","page":"Home","title":"QEDevents._assert_valid_input_type","text":"Interface function, which asserts that the given input is valid.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._momentum_type-Tuple{QEDevents.ParticleSampleable}","page":"Home","title":"QEDevents._momentum_type","text":"_momentum_type(s::ParticleSampleable,x)\n\nReturn the momentum type used for the generation of samples. The default is SFourMomentum.\n\nnote: Note\nThis interface function is optional for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._particle","page":"Home","title":"QEDevents._particle","text":"_particle(dist::SingleParticleDistribution)::QEDbase.AbstractParticle\n\nReturn the particle associated with the dist.\n\nnote: Note\nInterface function to be implemented for single-particle distributions.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents._particle_direction","page":"Home","title":"QEDevents._particle_direction","text":"_particle_direction(dist::SingleParticleDistribution)::QEDbase.ParticleDirection\n\nReturn the particle-direction of the particle associated with dist.\n\nnote: Note\nInterface function to be implemented for single-particle distributions.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents._post_processing-Tuple{QEDevents.ParticleSampleable, Any, Any}","page":"Home","title":"QEDevents._post_processing","text":"_post_processing(s::ParticleSampleable, x, result)\n\nReturn post-processed version of result. The default does nothing and returns result.\n\nnote: Note\nThis interface function is optional for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._weight","page":"Home","title":"QEDevents._weight","text":"_weight(s::ParticleSampleable, x)\n\nReturn the weight associated with the given sample x according to the particle-sampleable s. This function must not do input validation. This is done by weight, which calls _weight after input validation.\n\nnote: Note\nThis interface function must be implemented for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents.is_exact","page":"Home","title":"QEDevents.is_exact","text":"is_exact(s::ParticleSampleable)\n\nReturn whether or not the particle-sampleable s is exactly representing the distribution given by weight.\n\nnote: Note\nThis interface function must be implemented for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents.max_weight","page":"Home","title":"QEDevents.max_weight","text":"max_weight(::ParticleSampleable)\n\nInterface function, which returns the maximum possible weight for the particle-sampleable.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents.weight-Tuple{QEDevents.ParticleSampleable, Any}","page":"Home","title":"QEDevents.weight","text":"weight(d::ParticleSampleable, sample)\n\nReturn the weight of the given sample according to the given distribution.\n\nThis function automatically performs input validation and post-processing using the respective interface functions. The order of calls is\n\n_assert_valid_input_type\n_assert_valid_input\n_weight\n_post_processing\n\n\n\n\n\n","category":"method"}]
}
