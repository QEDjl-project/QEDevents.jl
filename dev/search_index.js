var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QEDevents","category":"page"},{"location":"#QEDevents","page":"Home","title":"QEDevents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QEDevents.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QEDevents]","category":"page"},{"location":"#QEDevents.MaxwellBoltzmann","page":"Home","title":"QEDevents.MaxwellBoltzmann","text":"MaxwellBoltzmann(scale::Real)\n\nThe Maxwell-Boltzmann distribution with scale parameter a has the probability density function\n\nf(xa) = sqrtfrac2pifracx^2a^3expleft(frac-x^22a^2right)\n\nThe Maxwell-Boltzmann distribution is related to the Chi distribution via the property Xsim operatornameMaxwellBoltzmann(a=1), then Xsimchi(mathrmdof=3).\n\nExternal links\n\nMaxwell-Boltzmann distribution on Wikipedia\nMaxwell-Boltzmann distribution on Wolfram MathWorld\nMaxwell-Boltzmann distribution implementation in Scipy\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.MaxwellBoltzmannParticle","page":"Home","title":"QEDevents.MaxwellBoltzmannParticle","text":"MaxwellBoltzmannParticle(     dir::ParticleDirection,     part::AbstractParticleType,     temperature::Real )\n\nThe Maxwell-Boltzmann particle distribution is a single-particle distribution, where the spatial components of the four-momentum are normally distributed with localion mu = 0 and variance sigma = m k_B T (m is the particle's mass, k_B is the Boltzmann constant, and T is the temperature). The three-magnitude varrho = sqrtp_x^2 + p_y^2 + p_z^2 of the generated particle-statefuls is MaxwellBoltzmann distributed.\n\nExternal links\n\nMaxwell-Boltzmann distributed four-momenta on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.MultiParticleDistribution","page":"Home","title":"QEDevents.MultiParticleDistribution","text":"MultiParticleDistribution\n\nBase type for sample drawing from multiple particle distributions. The following interface functions should be implemented:\n\nQEDevents._particles(d::MultiParticleDistribution)\nQEDevents._particle_directions(d::MultiParticleDistribution)\nQEDevents._randmom(rng::AbstractRNG,d::MultiParticleDistribution)\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.MultiParticleVariate","page":"Home","title":"QEDevents.MultiParticleVariate","text":"MultiParticleVariate\n\nAuxiliary type to represent multiple particles in the context of distributions and sampler. A sample from this variate form has the type Vector{ParticleStateful}.\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.ParticleLikeVariate","page":"Home","title":"QEDevents.ParticleLikeVariate","text":"ParticleLikeVariate{N<:Int}\n\nAuxiliary type to represent the number of axes in the space of all particles:\n\nN == 0 single particle variate\nN == 1 multiple particle variate\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.ParticleSampleable","page":"Home","title":"QEDevents.ParticleSampleable","text":"ParticleSampleable{V<:QEDlikeVariate}\n\nAbstract base type for sampleable particle distributions and sampler in the context of QEDevents.jl. Here a particle-sampleable is generally a type which has some sort of rand function to produce random samples for properties of given particles, like four-momentum, spin, polarization, etc..\n\nTo implement the particle-sampleable interface, the following functions need to be given:\n\nBase.eltype(s::ParticleSampleable): return the innermost type of the samples\n_weight(s::ParticleSampleable,x): return the weight of a given sample x\nis_exact(s::ParticleSampleable): return wether or not a particle-sampleable is exact\n\nOptionally, one can enhance the calculation of weights by providing\n\n_assert_valid_input_type(s::ParticleSampleable,x): assert input has the correct type\n_assert_valid_input(s::ParticleSampleable,x): assert input has correct properties\n_post_processing(s::ParticleSampleable,x,res): apply some postprocesing to the result of _weight.\n\nSee weight for details. Furthermore, one can provide custom four-momentum types used for the generation of samples by implementing\n\n_momentum_type(s::ParticleSampleable): return the momentum type used\n\nFor the actual sampling, one must implement\n\n_randmom(d::ParticleSampleable): return momenta according to d\n\nUsing these interface functions, the following versions rand function are implemented. However, if in the particular case, there are more sophisticated implementations for the respective version of the rand function (see below), they can be implemented instead of _randmom. Nevertheless, in this case, it is recommended for convenience to implement a _randmom function as well, maybe using the result of rand.\n\nnote: Single particle distribution\nFor SingleParticleVariatesamplers, the single sample version rand is given:Distributions.rand(\n    rng::Random.AbstractRNG,\n    s::ParticleSampleable{SingleParticleVariate})which returns a random sample from s as a ParticleStateful.\n\nnote: Multiple particle distribution\nFor MultiParticleVariate samplers, the mutating version of rand implemented:Distributions._rand!(\n    rng::Random.AbstractRNG,\n    s::ParticleSampleable{MultiParticleVariate},\n    out::AbstractArray{ParticleStateful})which also provides implementations of rand for one or more samples.\n\nnote: Scattering process distribution\nFor ProcessLikeVariate distributions, the single sample version of rand is given:Distributions.rand(\n    rng::Random.AbstractRNG,\n    s::ParticleSampleable{ProcessLikeVariate})which returns a PhaseSpacePoint including the respective scattering process, computation model and phase-space definition.\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.ProcessLikeVariate","page":"Home","title":"QEDevents.ProcessLikeVariate","text":"ProcessLikeVariate\n\nAuxiliary type to represent distributions and samplers for scattering processes.\n\nA sample from this variate form has the type PhaseSpacePoint.\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.ScatteringProcessDistribution","page":"Home","title":"QEDevents.ScatteringProcessDistribution","text":"ScatteringProcessDistribution\n\nBase type for sample drawing from scattering process distributions. The following interface functions should be implemented:\n\nQEDbase.process(d::ScatteringProcessDistribution)\nQEDbase.model(d::ScatteringProcessDistribution)\nQEDbase.phase_space_layout(d::ScatteringProcessDistribution)\nQEDevents._randmom(rng::AbstractRNG,d::ScatteringProcessDistribution)\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.SingleParticleDistribution","page":"Home","title":"QEDevents.SingleParticleDistribution","text":"SingleParticleDistribution\n\nBase type for sample drawing from single particle distributions. The following interface functions should be implemented:\n\nQEDevents._particle(d::SingleParticleDistribution): return associated particle\nQEDevents._particle_direction(d::SingleParticleDistribution): return associated particle direction\nQEDevents._randmom(d::SingleParticleDistribution): return momentum according to d\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents.SingleParticleVariate","page":"Home","title":"QEDevents.SingleParticleVariate","text":"SingleParticleVariate\n\nAuxiliary type to represent single particles in the context of distributions and sampler. A sample from this variate form has the type ParticleStateful.\n\n\n\n\n\n","category":"type"},{"location":"#QEDevents._assert_valid_input-Tuple{ParticleSampleable, Any}","page":"Home","title":"QEDevents._assert_valid_input","text":"_assert_valid_input(s::ParticleSampleable,x)\n\nThrow InvalidInputError if the input x is not valid, do nothing otherwise. This function is usually used for checking, if the input has the assumed properties. Type checks are done using multiple dispatch, or _assert_valid_input_type. The default is doing nothing.\n\nnote: Note\nThis interface function is optional for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._assert_valid_input_type-Tuple{ParticleSampleable, Any}","page":"Home","title":"QEDevents._assert_valid_input_type","text":"_assert_valid_input_type(s::ParticleSampleable,x)\n\nThrow InvalidInputError if the input x has the wrong type, do nothing otherwise. This function is usually used for complicated types, where the implementation via multiple dispatch is cumbersome. The default is doing nothing.\n\nnote: Note\nThis interface function is optional for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._assert_valid_input_type-Tuple{ScatteringProcessDistribution, QEDcore.PhaseSpacePoint}","page":"Home","title":"QEDevents._assert_valid_input_type","text":"Interface function, which asserts that the given input is valid.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._assert_valid_input_type-Union{Tuple{PS}, Tuple{MultiParticleDistribution, PS}} where PS<:Tuple{Vararg{QEDcore.ParticleStateful}}","page":"Home","title":"QEDevents._assert_valid_input_type","text":"Interface function, which asserts that the given input is valid.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._assert_valid_input_type-Union{Tuple{P}, Tuple{D}, Tuple{SingleParticleDistribution, QEDcore.ParticleStateful{D, P}}} where {D, P}","page":"Home","title":"QEDevents._assert_valid_input_type","text":"Interface function, which asserts that the given input is valid.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._momentum_type-Tuple{ParticleSampleable}","page":"Home","title":"QEDevents._momentum_type","text":"_momentum_type(s::ParticleSampleable,x)\n\nReturn the momentum type used for the generation of samples. The default is SFourMomentum.\n\nnote: Note\nThis interface function is optional for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._particle","page":"Home","title":"QEDevents._particle","text":"_particle(dist::SingleParticleDistribution)::AbstractParticle\n\nReturn the particle associated with the dist.\n\nnote: Note\nInterface function to be implemented for single-particle distributions.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents._particle_direction","page":"Home","title":"QEDevents._particle_direction","text":"_particle_direction(dist::SingleParticleDistribution)::ParticleDirection\n\nReturn the particle-direction of the particle associated with dist.\n\nnote: Note\nInterface function to be implemented for single-particle distributions.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents._particle_directions","page":"Home","title":"QEDevents._particle_directions","text":"_particle_direction(dist::MultiParticleDistribution)\n\nReturn tuple of particle-directions for all particles associated with dist.\n\nnote: Note\nInterface function to be implemented for multi-particle distributions.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents._particles","page":"Home","title":"QEDevents._particles","text":"_particle(dist::MultiParticleDistribution)\n\nReturn tuple of particles associated with the dist.\n\nnote: Note\nInterface function to be implemented for multi-particle distributions.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents._post_processing-Tuple{ParticleSampleable, Any, Any}","page":"Home","title":"QEDevents._post_processing","text":"_post_processing(s::ParticleSampleable, x, result)\n\nReturn post-processed version of result. The default does nothing and returns result.\n\nnote: Note\nThis interface function is optional for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents._randmom","page":"Home","title":"QEDevents._randmom","text":"_randmom(rng::AbstractRNG,d::ParticleSampleable)\n\nReturn random momentum/momenta according to the distribution d. The momentum type used in the return must be equal to the one returned by _momentum_type.\n\nThe actual return type for _randmom depends on the variate form.\n\nnote: Single particle distributions\nThe _randmom function must return a single momentum, which type is the same as retured by _momentum_type\n\nnote: Multiple particle distribution\nFor a set of particles, the _randmom function must return an iterable container of momenta (e.g. a tuple or vector), which length is the same as the number of particles according to the distribution. The element type of this container must be the same as returned by _momentum_type.\n\nnote: Scattering process distributions\nFor scattering processes, the _randmom function must return two iterable containers of momenta, one for the incoming and one for the outgoing particles. The momentum type in both of the containers must be the same as returned by _momentum_type.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents._weight","page":"Home","title":"QEDevents._weight","text":"_weight(s::ParticleSampleable, x)\n\nReturn the weight associated with the given sample x according to the particle-sampleable s. This function must not do input validation. This is done by weight, which calls _weight after input validation.\n\nnote: Note\nThis interface function must be implemented for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents._weight-Union{Tuple{T}, Tuple{P}, Tuple{D}, Tuple{MaxwellBoltzmannParticle{D, P, T}, QEDcore.ParticleStateful{D, P}}} where {D, P, T}","page":"Home","title":"QEDevents._weight","text":"_weight(\n    d::MaxwellBoltzmannParticle{D,P,T}, ps::ParticleStateful{D,P}\n) where {D,P,T}\n\nUnsafe weight-function for MaxwellBoltzmannParticle, which is given by\n\n\nw(p) = begincases\nfrac14pisqrtfrac2pifracvarrho^2a^3expleft(frac-varrho^22a^2right)quad textfor  p^2=m^2\n0 mathrmelsewhere\nendcases\n\n\nwith varrho^2 = p_x^2 + p_y^2 + p_z^2 and a = sqrtm k_B T (m is the particle's mass, k_B is the Boltzmann constant, and T is the temperature).\n\n\n\n\n\n","category":"method"},{"location":"#QEDevents.is_exact","page":"Home","title":"QEDevents.is_exact","text":"is_exact(s::ParticleSampleable)\n\nReturn whether or not the particle-sampleable s is exactly representing the distribution given by weight.\n\nnote: Note\nThis interface function must be implemented for subtypes of ParticleSampleable.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents.max_weight","page":"Home","title":"QEDevents.max_weight","text":"max_weight(::ParticleSampleable)\n\nInterface function, which returns the maximum possible weight for the particle-sampleable.\n\n\n\n\n\n","category":"function"},{"location":"#QEDevents.weight-Tuple{ParticleSampleable, Any}","page":"Home","title":"QEDevents.weight","text":"weight(d::ParticleSampleable, sample)\n\nReturn the weight of the given sample according to the given distribution.\n\nThis function automatically performs input validation and post-processing using the respective interface functions. The order of calls is\n\n_assert_valid_input_type\n_assert_valid_input\n_weight\n_post_processing\n\n\n\n\n\n","category":"method"}]
}
